#+TITLE: Everything you need to know before try Emacs
#+DATE: 2020-11-29T09:06:19+08:00
#+DRAFT: false
#+TAGS[]: emacs
#+KEYWORDS[]:
#+SLUG:
#+SUMMARY:

When it comes to Emacs, every programmer should have heard its name more or less. After all, Emacs has a long history of nearly [[https://www.zdnet.com/article/the-10-oldest-significant-open-source-programs/][forty years]] . However, due to the high learning curve of Emacs, many beginners abandon it before grasping its essence. Before I was "skilled" in using Emacs, I was so abused by it, but fortunately I persisted and added a lot of fun to my programming career.

This article will be divided into two parts to introduce how to get started with Emacs.
1. The first part will introduce the core concept. I think the reason why many beginners give up after simply trying Emacs is that they don’t understand its design concept. Emacs is so unique that there are a lot of discomforts when migrate from traditional editors.

  By understanding its concept, readers can judge whether Emacs is in line with their own taste and whether it is worth the effort to master it.

2. The second part will give some specific suggestions to beginners who want to get started with Emacs based on my more than four years of experience. I will also introduce some extensions that I use daily. Many users choose Emacs because of a certain function of one of the extension. I often amaze the power of Emacs because of the advanced usage of some entension.

Although this article will use ELisp as an example, readers do not need to learn ELisp and basic programming skills is enough. Secondly, this article compares the features of Emacs with the more popular VSCode editor, and it is also valid to change to other editors.

#+begin_quote
Emacs is Emacs VSCode / Vim / Sublime ... is yet just another editor ---- [[https://news.ycombinator.com/item?id=18400204][Source]]
#+end_quote

#+CAPTION: Learning curves of different editors
[[https://img.alicdn.com/imgextra/i4/581166664/O1CN0156nQHc1z6A1VldH2x_!!581166664.png]]

* Core concept
The official [[https://www.gnu.org/software/emacs/][GNU Emacs]] website introduces this:
#+begin_quote
An extensible, customizable, free/libre text editor — and more.
#+end_quote
The first part is fairly straightforward, as for the =more= part, the benevolent sees benevolence, and the wise see wisdom. It was once joked that Emacs was an operating system disguised as an editor. This section will unveil the mystery of Emacs.

** Text editor
No matter how Emacs fans deify it, first Emacs is a text editor, and then the others. Unlike VSCode, Emacs is designed for pure keyboard operation, and the similar editor is only Vi. The operation of the pure keyboard ensures higher efficient. At the same time, this has become a barrier for beginners to get started, and it takes some time to adapt.

As far as text editing is concerned, Emacs provides a lot of thoughtful functions. Here are two things:

*** Backup
As a mature programmer, you need to be aware of backups at all times. After all, mistakes are inevitable. In Emacs, there are mainly two backup methods, called [[https://www.gnu.org/software/emacs/manual/html_node/elisp/Backup-Files.html][static backup]] and [[https://www.gnu.org/software/emacs/manual/html_node/elisp/Auto_002dSaving.html#Auto_002dSaving][auto saving]] here.

- Static backup occurs when you first open the file, the end of the backup file name has =~= labeled; and support multiple versions of backup
- Automatic backup As the name suggests, periodically save the current file being edited, the file name of the head and tail have =#= marked. When saving, the automatically backed up files will be deleted, and when Emacs crashes due to unexpected reasons (such as a crash), the files will be retained, and you can use the [[https://www.gnu.org/software/emacs/manual/html_node/emacs/Recover.html][recover-this-file]] command to restore.

#+begin_src
Statically backed up files
!Users!liujiacai!.emacs.d!README.org.~ 1 ~
!Users!liujiacai!.emacs.d!README.org.~ 2 ~
!Users!liujiacai!.emacs.d!customizations! editing.el.~ 1 ~*
!Users!liujiacai!.emacs.d!customizations!editing.el.~ 44 ~*
!Users!liujiacai!.emacs.d!customizations!editing.el.~ 45 ~*
!Users !liujiacai!.emacs.d!customizations!editing.el.~ 46 ~*
!Users!liujiacai!.emacs.d!customizations!editing.el.~ 47 ~*
!Users!liujiacai!.emacs.d!customizations! editing.el.~ 48 ~*

Automatically backed up files
#!Users!liujiacai!.emacs.d!customizations!misc.org#
#!Users!liujiacai!.emacs.d!customizations!navigation.el#*
#!Users!liujiacai!.emacs.d! elpa!lsp-java- 20201105.1758 !lsp-java.el#
#!Users!liujiacai!.emacs.d!init.el#
#+end_src
The above is part of the backup file in my computer. Thanks to these two functions, I have been rescued from the edge of a crash many times. As far as I know, no editor has such intimate features.

*** Undo/Redo
When editing the file, [[https://www.gnu.org/software/emacs/manual/html_node/emacs/Undo.html][undo]] and redo is a very basic, important feature. In conventional editor operations are linear, whereas in Emacs, it is a tree, I will illustrate the difference between the two using state diagram below

- First, enter three characters =a b c=, and we come to =current buffer state=
#+begin_src
;;                                o  (initial buffer state)
;;                                |
;;                                |
;;                                o  (first edit)
;;                                |
;;                                |
;;                                o  (second edit)
;;                                |
;;                                |
;;                                x  (current buffer state)
#+end_src
- Then undo of two steps back to first edit state (only a is left), conventional editor will have state as
#+begin_src
;;                                o  (initial buffer state)
;;                                |
;;                                |
;;                                x  (current buffer state)
;;                                |
;;                                |
;;                                o
;;                                |
;;                                |
;;                                o

#+end_src
However, Emacs is not the case, its status is
#+begin_src
;;                                o  (initial buffer state)
;;                                |
;;                                |
;;                                o  (first edit)
;;                                |
;;                                |
;;                                o  (second edit)
;;                                |
;;                                |
;;                                x  (buffer state before undo)
;;                                |
;;                                |
;;                                o  (first undo)
;;                                |
;;                                |
;;                                x  (second undo)
#+end_src
The state is append-only, and a undo means returning to the last state, so the following state diagram may be more appropriate:
#+begin_src
;;        (initial buffer state)  o
;;                                |
;;                                |
;;                  (first edit)  o  x  (second undo)
;;                                |  |
;;                                |  |
;;                 (second edit)  o  o  (first undo)
;;                                | /
;;                                |/
;;                                o  (buffer state before undo)
#+end_src
- At this point, if you perform a new insertion (such as =d=), although the characters on the text are the same, simply =a d=, the state diagrams of editors are different, as shown below:
#+begin_src
;;            Undo/Redo:                      Emacs' undo
;;
;;               o                                o
;;               |                                |
;;               |                                |
;;               o                                o  o
;;               .\                               |  |\
;;               . \                              |  | \
;;               .  x  (new edit)                 o  o  |
;;   (discarded  .                                | /   |
;;     branch)   .                                |/    |
;;               .                                o     |
;;                                                      |
;;                                                      |
;;                                                      x  (new edit)
#+end_src
- At this point, if we undo twice, conventional editor returns to initial state (no characters), but Emacs restore to second state (there are =a b= there).

It is very confusing when I first encountered the undo and redo in Emacs, but fortunately there is an extension called [[https://www.emacswiki.org/emacs/UndoTree][Undo Tree]] to visualize the undo state. The state diagram above is taken from its comments, thanks contributions of its authors.

** Expansion and customization
#+begin_quote
At its core is an interpreter for Emacs Lisp, a dialect of the Lisp programming language with
extensions to support text editing.
#+end_quote

The above section introduced two very useful basic functions in text editing. In fact, this is just the tip of the iceberg. Emacs's extensible and customizable features create a creative community with countless powerful extensions. Readers may wonder, VSCode also has a rich extension market , so how is Emacs different from them? This is related to the Emacs [[https://www.gnu.org/software/emacs/emacs-paper.html#SEC14][design architecture]].

Emacs itself can be regarded as a virtual machine(Lisp Machine). Except for the IO operations that interact with the operating system, which is implemented in C language, the rest are implemented by ELisp, and an interpreter is provided to run these ELisp codes.
Each character input is equivalent to calling the [[https://www.gnu.org/software/emacs/manual/html_node/elisp/Commands-for-Insertion.html][self-insert-command]] command in the REPL of the interpreter , which means that the code defined by the user is equal to the Emacs source code (ELisp part).

If the reader is not familiar with Lisp, so to analogy, open Emacs corresponds to type =python= in terminal, keyboard input, mouse click corresponds are all function call.

One of the advantages of Lisp REPL is that it can dynamically change the internal state of the program. For example, if a variable such as =foo= is defined in Emacs source code, the function written by the user can directly modify it. For those who do not know Lisp, this is very incredible thing, but it is.

This advantage of dynamically change state of running program is easy to extend, such as

#+begin_src emacs lisp
(defun my/google-search ()
  "Googles a query or region if any."
  (interactive)
  (browse-url
   (concat
    "http://www.google.com/search?ie=utf-8&oe=utf-8&q="
    (if mark-active
        (buffer-substring (region-beginning) (region-end))
      (read-string "Google: ")))))
#+end_src
Put the few lines of code above to =init.el=, We add a useful function to open a browser in Emacs, and do google search.

In VSCode, even a Hello World level extension, the steps are much more complicated, concrete step please refer to:
- https://code.visualstudio.com/api/get-started/your-first-extension

In addition to the ease of extension, another advantage of ELisp REPL is that it is highly customizable. In addition to the C language part of the implementation, the rest of the ELisp implementation can be all modified. For example, the picture below is the Emacs standard interface

[[https://www.gnu.org/software/emacs/images/teaser.png]]

Most Emacs users hide the menu bar with such a line of code ~(menu-bar-mode -1)~, because menu is basically not used and takes up space. In addition, Emacs can also be used to [[https://www.emacswiki.org/emacs/MusicPlayers][listen to music]] , [[https://www.emacswiki.org/emacs/CategoryGames][play games]] , [[https://depp.brause.cc/nov.el/][read EPUB e-books]] , [[https://github.com/zevlg/telega.el][chat Telegram]] , and even [[https://github.com/manateelazycat/emacs-application-framework][any application]] can run in Emacs!

#+begin_quote
Emacs, “a great operating system, lacking only a decent editor”
#+end_quote

#+CAPTION: Listen netease music in Emacs
[[https://img.alicdn.com/imgextra/i2/581166664/O1CN01ePMFmU1z6A1W5J6a4_!!581166664.png]]
#+CAPTION: Playing Tetris in Emacs
[[https://img.alicdn.com/imgextra/i2/581166664/O1CN012SFAW41z6A1WeRU9M_!!581166664.png]]
#+CAPTION: Read EPUB e-books in Emacs
[[https://img.alicdn.com/imgextra/i4/581166664/O1CN01hJslQh1z6A1VLFP7y_!!581166664.png]]
#+CAPTION: Telegram chat in Emacs
[[https://img.alicdn.com/imgextra/i4/581166664/O1CN01DWl21B1z6A1UNsI4U_!!581166664.jpg]]
#+CAPTION: Run aria2 using EAF in Emacs
[[https://img.alicdn.com/imgextra/i1/581166664/O1CN01vpjexS1z6A1PICqIh_!!581166664.gif]]

** Free/Libre
When it comes to Emacs, the person I have to mention is Richard Stallman. There were many versions of Emacs in the early days, but now GNU Emacs has basically unified the world.
#+CAPTION: Richard Stallman
[[https://img.alicdn.com/imgextra/i2/581166664/O1CN01VH3Txp1z6A1WcQQ05_!!581166664.jpg]]

Stallman strongly advocates free software. The definition of free software can be found on the [[https://www.gnu.org/philosophy/free-sw.html][official GNU website]], so I won't repeat it here. Readers at least need to be clear that free in the GNU community stands for freedom, not free beer.

Free software has undoubtedly greatly promoted the development of the software industry. It gives programmers the opportunity to understand the implementation mechanism of the software used. As one of the early works of Stallman, Emacs undoubtedly inherits this idea. Every operation can be traced to the source, I like this feeling of freedom.

More Emacs Hackers can refer to:

- [[http://ergoemacs.org/misc/famous_emacs_users.html][Famous Emacs Users]] by Xah Lee
- [[http://ergoemacs.org/emacs/Matz_Ruby_how_emacs_changed_my_life.html][Ruby Creator Matz on How Emacs Changed My Life]] by Xah Lee
- [[http://wenshanren.org/?p=418][Famous Emacs Users (that are not famous for using Emacs)]]

* Getting Started
** Experience and suggestions
I came into Emacs because I learned Clojure. As a Lisp, Emacs is undoubtedly the best editor. However, due to the "ugly" UI, "awkward" operation of vanilla Emacs, many attempts were made before comfort with it. It is Emacs tutorial on [[https://www.braveclojure.com/basic-emacs/][braveclojure]] help me overcome the hard days, I used the [[https://github.com/flyingmachine/emacs-for-clojure][emacs-for-clojure]] configuration as the basis, and I forced myself to code in Emacs as much as possible out of my love for Lisp.

It took about a month or two to get through the most difficult period of adaptation, and I couldn't live without Emacs now. Up to now, [[https://github.com/jiacai2050/dotfiles/tree/master/.emacs.d][my configuration file]] has been enriched a lot, and there are many functions written by myself. Before learning a new language, the relevant Emacs extensions will be configured first, so that everything will be running in Emacs. Here I want to emphasize one point:

#+begin_quote
In terms of a single function, Emacs may not be the best, but how to organically combine various functions and reduce switching, Emacs is the best.
#+end_quote

Here are some suggestions based on my own experience after using Emacs for 4 years:

- Find a mature configuration and use Emacs first. You don't have to worry about the details at first. Spacemacs and Doom Emacs are the two most popular in the community. It is recommended that beginners try both to find the most suitable for them.
- Find a month to focus on familiarizing with Emacs. Don't use it intermittently, otherwise it will be difficult to adapt to it. Once this month has passed, there will be unlimited "spring breeze".
- When various extensions cannot meet your needs and have bugs (I'm in this status probably after two to three years), learn ELisp. After all, this is its essence. Recommend resources: [[http://ergoemacs.org/emacs/emacs.html][Practical Emacs Tutorial]] by Xah Lee and [[https://learnxinyminutes.com/docs/elisp/][Learn X in Y minutes]]
- Make good use =C-h i=, the documentation that comes with Emacs, especially [[https://www.gnu.org/software/emacs/manual/html_node/efaq/Learning-how-to-do-something.html][do I find out how to do something in Emacs?]]
- As of the beginning of 2020/November, I use Emacs to pursue the "authentic" and try to use Emacs's own shortcut keys (=C-x C-s=). Although my little finger started to hurt a year ago, I mapped the CAPS key to Ctrl at that time to overcome this. Problem still remains but I'm this mode for about one more year.

  Although the community recommends the use of [[https://github.com/emacs-evil/evil][evil]] to solve this problem, I thought it was not "loyal" enough, and never used it. Until recently I discovered the [[https://www.gnu.org/software/emacs/manual/html_mono/viper.html][viper mode]] and realized the naivety of this idea, Emacs's core idea is that you can customize it according to your own needs, there is no so-called standard answer. Emacs will absorb the advantages of other editors. So I immediately configured the evil and completely liberated my little finger. After more than four years, I can still learn some life experience from Emacs. It is estimated that this is not possible with other software. This also prompted me to write this article to prevent beginners from falling into this kind of thinking.

Of course, everyone's learning path is different. Readers can adjust according to their own situation.

** Extensions recommendation
*** Org-mode
#+CAPTION: org-mode logo
[[https://orgmode.org/resources/img/org-mode-unicorn.svg]]

Org-mode is the main reason why many non-programmers choose Emacs. Simply put, it is a markdown-like markup language. Many users use it to take notes and manage GTD. With the help of Emacs's powerful expansion capabilities, programmers use it for [[http://www.howardism.org/Technical/Emacs/literate-devops.html][literate programming]], and it deserves to be ranked first in the extension list. 🥇

At present, I use org-mode relatively simply, just use it as markdown at the time. Just this point, coupled with the shortcut keys of Emacs, it has been a few blocks ahead from various editors.

One thing I demo here is table support with org-mode. You can use the ~org-table-transpose-table-at-point~ command to transpose row and column of a table.

[[https://img.alicdn.com/imgextra/i1/581166664/O1CN01VDVZEM1z6A1UOtSm0_!!581166664.gif]]


*** Magit

[[https://img.alicdn.com/imgextra/i1/581166664/O1CN01GeC6rw1z6A1VdWuEW_!!581166664.png]]

Magit provides an interface for Emacs users to operate git. It is the first Emacs extension I rely heavily on and the second-ranked extension in the community. All git operations are extremely smooth with deeply integrated into Emacs's shortcut keys. Without it, I wouldn't even be able to [[http://www.howardism.org/Technical/Emacs/magit-squashing.html][rebase]].

*** Evil

#+CAPTION: Evil Emacs steal my heart
[[https://img.alicdn.com/imgextra/i3/581166664/O1CN01TjEFRp1z6A1U4MagS_!!581166664.png]]

I mentioned evil in my personal experience above . It is not "evil" but Extensible VI Layer for Emacs. In addition to porting vi's normal/insert/visual state (mode is otherwise referred to in Emacs), Evil also adds emacs state to disable all vi functions. Because it is in Emacs inside, we can customize the shortcut keys to override vi's default keyboard shortcuts, we can have both =h j k l= and =C-a, C-e, M-s, M-f, M-b=.

Copy 7 lines of text, in the normal state of evil, only need

#+begin_src
7 yy
#+end_src
And in Emacs requires
#+begin_src
C-a C-SPC Cu 6 Cn C -e Mw
#+end_src

#+begin_quote
The best editor is neither Emacs nor Vim, it's Emacs with Vim binding!
#+end_quote


*** Dired

Dired is the abbreviation of directory editor and is the built-in extension of Emacs, similar to the file manager Finder on macOS. In Dired interface, you can easily move / delete / create the file just like edit text. The following figure shows how to batch =test_foo_*.dat= rename =test_bar_*.dat=. ([[http://pragmaticemacs.com/emacs/dired-rename-multiple-files/][source]])

#+CAPTION: dired rename files in batch
[[https://img.alicdn.com/imgextra/i2/581166664/O1CN01QIzFM91z6A1TiEdB0_!!581166664.gif]]

*** Ivy/Counsel/Swiper

Ivy/Counsel/Swiper is a completion framework, which can easily display the candidates of the current operation in an interactive way, similar to the [[https://code.visualstudio.com/docs/getstarted/userinterface#_command-palette][Command Palette]] in VSCode and [[https://blog.jetbrains.com/idea/2020/05/when-the-shift-hits-the-fan-search-everywhere/][Double Shift]] in Intellj .

[[https://img.alicdn.com/imgextra/i1/581166664/O1CN01BnQ5pp1z6A1NIcJrL_!!581166664.png]]

Although other editors have similar functions, their functions are either limited or separated from other functions, and there is no unified experience. Emacs is different, no matter how many extensions we can still have a unified experience, this greatly affects the user experience. Below, ivy-occur + wgrep + evil is used to [[https://sam217pa.github.io/2016/09/13/from-helm-to-ivy/][modify the contents of multiple files]] in bulk to illustrate the powerful functions of the ivy suite.

There are two files =1.txt= =2.txt= in current directory, whose content are all =hello world=,  and modify to =hello emacs= at last.

[[https://img.alicdn.com/imgextra/i1/581166664/O1CN01dS73W31z6A1Tk5UwK_!!581166664.gif]]

Steps:

- =counsel-ag world= search the current directory to search for files containing =world=
- =C-c C-o (ivy-occur)= Open the occur interface
- =C-x C-q (ivy-wgrep-change-to-wgrep-mode)= Enter edit mode
- =:%s/world/emacs/g= Modify content with the help of evil
- =C-c C-c (wgrep-finish-edit)= Save files

Of course, you can define shortcut keys for the above operations according to your own habits. The above five steps are done in one go.

*** Lsp-mode

#+CAPTION: lsp-mode
[[https://img.alicdn.com/imgextra/i1/581166664/O1CN01EeQOpy1z6A1U5lWzk_!!581166664.png]]

Before the emergence of LSP , there was no unified framework to solve the basic functions of modern IDEs such as highlighting and completion of different languages. The LSP launched by Microsoft has undoubtedly become the industry standard, and there is no need to use regular, which is both inaccurate and rude. There are two extensions in Emacs that support LSP, namely

- Lsp-mode, provides all the experience of traditional IDE by default
- EGlot, the main focus is small and exquisite

Currently I use lsp-mode, beginners can try it, and then choose the one that suits their taste.

*** More
In addition to the extensions introduced above, there are some more "small" extensions I use daily. Of course, the list can go on and on, readers can find out more by yourselve.

- =company= completion framework, can be used with lsp-mode
[[https://img.alicdn.com/imgextra/i3/581166664/O1CN01F3lxtC1z6A1RlueN7_!!581166664.png]]

- =multiple-cursors=
[[https://img.alicdn.com/imgextra/i4/581166664/O1CN01ceUOar1z6A1OW1MMp_!!581166664.gif]]

- =ace-jump-mode= moves the cursor quickly according to the character. The figure below is an example of fast jump according to p
[[https://img.alicdn.com/imgextra/i1/581166664/O1CN019sHvUm1z6A1R9QtHn_!!581166664.gif]]

- =yasnippet= template system, which simplifies input by defining abbreviations for code fragments
[[https://img.alicdn.com/imgextra/i2/581166664/O1CN01lQVIpx1z6A1Wz6Th3_!!581166664.png]]

- =flycheck= syntax real-time check
[[https://img.alicdn.com/imgextra/i4/581166664/O1CN01gL8IST1z6A1WZt3Dk_!!581166664.png]]

- =treemacs= file directory tree navigation
[[https://img.alicdn.com/imgextra/i3/581166664/O1CN01oTtvbz1z6A1RykfJ8_!!581166664.png]]

- =projectile= project workspace management
[[https://img.alicdn.com/imgextra/i3/581166664/O1CN01yHD9GD1z6A1Tmi66V_!!581166664.gif]]
 The above illustration shows how to find files in a project, switch between implementation and testing, and switch between different projects


*  Conclusion
Perhaps the popularity of Emacs is far less than VSCode, but this is not a bad thing. For example, free riders are not suitable for using Emacs. Let them in will only lower the overall level of the community; and Emacs is an open system, it will learn from excellent design in VSCode, Emacs and other editors are not mutually exclusive.

There will alway be posts telling switch bewteen Emacs than other editors in the Internet, this kind of controversial topic will undoubtedly attract everyone’s attention, but don’t forget the free spirit of Emacs. The one that suits you is the best. There is no need to indulge in something.

After all, Emacs/VSCode are just tools. Solving practical problems is the most important thing. Of course, a comfortable +operating system+ editor will make this boring process fun.

Finally, I want to share with you a sentence from [[https://www.masteringemacs.org/article/the-emacs-27-edition-of-mastering-emacs-out-now][Mastering Emacs]], Happy Emacs.

#+begin_quote
Your patient mastery of Emacs is well-rewarded. I assure you.
#+end_quote

[[https://img.alicdn.com/imgextra/i1/581166664/O1CN01bolPgY1z6A1VNlxl8_!!581166664.jpg]]

* Reference
- [[https://irreal.org/blog/?p=279][Emacs As A Lisp Machine]]
- [[https://news.ycombinator.com/item?id=18398324][Ask HN: Is Visual Studio Code the Emacs of 21st century?]]
- [[https://www.reddit.com/r/emacs/comments/flpzft/what_benefits_does_emacs_offer_over_vs_code/][What benefits does emacs offer over vs code]]
- [[https://unix.stackexchange.com/questions/986/what-are-the-pros-and-cons-of-vim-and-emacs][What are the pros and cons of Vim and Emacs?]]
- [[https://lwn.net/Articles/819452/][Making Emacs popular again]]
- [[https://web.archive.org/web/20190430192029/https://m.facebook.com/notes/daniel-colascione/buttery-smooth-emacs/10155313440066102/][Buttery Smooth Emacs]]
- https://batsov.com/articles/2011/11/19/why-emacs/
- https://github.com/remacs/remacs#why-emacs
